-   ## 입, 출력

    백준에서는 입력을 요구하기 때문에 문제에 맞는 입력방식을 골라주면 됩니다.

    ### 다양하게 입력받기

    -   #### **문자 입력**

    	
       ```python
        n = input()
        x, y = input().split() 
        → 공백을 기준으로 입력값을 각 변수에 입력받는 방법(왼쪽의 변수 갯수와 입력하는 갯수가 일치해야 합니다.)
        x = list(input().split()) 
        → x라는 변수 내부에 공백을 기준으로 모든 입력값을 담은 리스트를 생성(리스트 원소들은 전부 문자열)
        x, *array = input().split() 
        → *array 이전까지는 공백을 기준으로 변수에 입력받고 그 이후에 들어온 입력값들은 갯수에 상관없이 array라는 이름의 배열로 받습니다.
       ```

        파이썬에선 기본적으로 **문자열** 타입으로 입력값을 넣어주기 때문에 입력을 하면 입력 받은 변수들은 문자열 타입으로 넣어집니다.  
        즉 1, 2, 3 같은 숫자를 입력해도 int형에서 사용하는 range 함수를 활용한 연산은 불가능 합니다.

        ex) for i in range(n): → `TypeError: 'str' object cannot be interpreted as an integer`

    -   #### **숫자 입력**

        알고리즘 문제에서는 문자보다 숫자를 입력하는 경우가가 더 많기 때문에 **int 형태로 입력**받는 방법도 알아야 합니다.

        ```python
        n = int(input())
        x, y = map(int, input().split())
        x = list(map(int, input().split()))
        x, *array = map(input, input().split())
        ```

        기본적인 입력방법과 형태는 유사한데 `map(함수, 반복자)`를 사용해서 우측의 반복자의 원소에 왼쪽의 형변환 함수를 적용시키는 방법을 사용합니다. 

        map 함수는 앞으로도 다양한 곳에서 사용할 예정이라 사용 예시를 따로 다룰 예정입니다.

        int 함수를 기본으로 사용해서 int 형변환이 일어났지만 **float을 사용하면 소수**로 입력도 가능하다.

    -   #### **n차원 배열, 그래프 입력하기**

        첫 줄에 입력되는 데이터 갯수 N이 주어지고, N만큼 공백을 기준으로 입력되는 숫자들을 입력

        → 토마토문제(https://www.acmicpc.net/problem/7576)

        ```python
        # 입력
        6 4
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 1
        ## 코드 1
        array = []
        n = int(input()) # 4 입력
        for _ in range(n):
        	inputs = list(map(int, input().split())
        	arrays.append(inputs)
        ## 코드 2
        arrays = [list(map(int, input().split())) for _ in range(int(input())]
        print(arrays)
        # [[0, 0, 0, 0, 0, 0],
        #  [0, 0, 0, 0, 0, 0],
        #  [0, 0, 0, 0, 0, 0],
        #  [0, 0, 0, 0, 0, 1]]
        ```

        코드 1과 2는 같은 방법으로 동작하는데 리스트 컴프리헨션을 이용하면 이렇게 코드를 짧게 만들 수 있습니다.

        리스트 컴프리헨션도 따로 다룰 예정입니다.

    -   **빠른 입력**

        백준에서는 입력 칸에서 입력되는 데이터들에 대한 정보가 주어지는데 입력하는 횟수가 많은 문제들이 존재합니다. 

        보통의 문제들에서는 input() 함수를 쓰면 시간 제한에 걸리지 않지만 입력 데이터가 많은 문제에서는 빠르게 입력받는 방법을 사용해야 시간초과가 뜨지 않습니다.

        입력 데이터가 적은 문제 → 일곱난쟁이(https://www.acmicpc.net/problem/2309) 

        입력 데이터가 많은 문제 → 스택(https://www.acmicpc.net/problem/10828)

        ```python
        빠른 입력
        import sys
        input = sys.stdin.readline
        ```

        sys 라이브러리의 stdin.readline은 input이라고 선언해두고 평소처럼 input()으로 호출하면 입력 시간이 대폭 감소해서 **입력 때문에** 시간 초과가 나지 않게 됩니다. 만약 이렇게 해도 시간초과가 뜬다면 작성된 코드의 시간복잡도를 줄이는 방법이 필요할 수 있습니다.

    ### 출력

    출력은 정답의 출력도 있지만 문제를 풀 때 원하는 형태로 변했는지 확인하는 디버깅으로 쓰일 때가 있습니다.

    -   #### **리스트의 원소들을 한 줄로 출력**

        처음 코딩을 할 때는 print(end = ' ') 방식으로 반복문을 돌리는 방법을 사용했었는데 다른 방법도 알아보겠습니다.

        ```python
        x = [1, 2, 3, 4, 5]
        아래의 출력 결과는 1 2 3 4 5로 동일하다.
        ## 코드 1, end = ' ' 방식
        for i in x:
        	print(i, end = ' ')
        ## 코드 2, * unpacking 방식
        print(*x)
        ## 코드 3, ' '.join() 방식
        print(' '.join(map(str, x))
        ```

        **설명**

        1번은 print() 할 때 다음 줄로 자동으로 넘어가는걸 방지하기 위해 `end = ' '` 을 옵션으로 넣는 방법을 반복문과 함께 사용한 방법으로 구구단의 출력 같은곳에서 자주 사용하는 방법입니다.

        2번은 unpacking이라고 반복자(리스트, 튜플 등)에서 변수 앞에 *을 적어주면 내부의 원소를 **처음부터 끝까지** 뽑아 옵니다. for문으로 시작부터 끝까지 반복하는 방법이라고 생각하면 편합니다. 입력에서 *array 라는 변수로 변칙적인 개수의 입력을 받을 수 있던 이유도 앞에 *을 적어서 입력된 모든 데이터는 array라는 반복자의 시작~끝의 원소라고 약속을 한 것과 같습니다.

        3번은 `' '.join()` 함수를 사용했습니다. join() 함수는 내부에 **문자열로 이루어진 반복자**를 받을 수 있는데 x의 원소들은 int형이라서 함수를 사용하기 위해선 map함수를 활용한 형변환을 해줘야 했습니다.

    -   #### **문자열을 글자 단위로 쪼개기**

        입력된 문자를 글자 단위로 활용해서 문제를 해결하는 경우가 있습니다. 이를 list() 함수로 형변환을 진행하면 모든 글자를 담은 하나의 리스트로 변환됩니다.

        → 알파벳(https://www.acmicpc.net/problem/1987)

        ```python
        입력
        2 4
        CAAB
        ADCB
        board = [list(input()) for _ in range(int(input())] # 2 입력 후 CAAB, ADCB 입력
        # [['C', 'A', 'A', 'B'],
        #  ['A', 'D', 'C', 'B']]
        ```

    -   #### **f-string** 포매팅을 활용한 간편한 출력

        파이썬3 에서는 다양한 출력 포멧을 지원하는데 이중 f-string은 가독성과 복잡함을 개선시켜 오타를 줄이는데 큰 도움이 됩니다. (3.6 버전 이후로 적용됐다고 합니다.)

        a와 b의 사칙연산을 출력하는 코드를 작성한다고 가정해보겠습니다.

        ```python
        a, b = 3, 5
        # 기존의 print() 방식
        print(a, "+", b, "=", a+b) # 3 + 5 = 8
        print(a, "-", b, "=", a-b) # 3 - 5 = -2
        print(a, "*", b, "=", a*b) # 3 * 5 = 15
        print(a, "/", b, "=", float(a/b)) # 3 / 5 = 0.6
        # f스트링
        print(f"{a} + {b} = {a+b}")
        print(f"{a} - {b} = {a-b}")
        print(f"{a} * {b} = {a*b}")
        print(f"{a} / {b} = {float(a/b)}")
        ```

        하나의 문자열 `" "` 내부에 문자열, 변수, 연산을 자유롭게 사용할 수 있기 때문에 f-string에 익숙해지면 문제풀이시 print문 작성이 쉬워집니다.
